return(primo)
}
Ehprimo(13)
Ehprimo(5)
Ehprimo()
Ehprimo(10)
pi
pi<-67
pi
searchpaths()
base::pi
library(ggplot2)
searchpaths()
for(i in 1:10){
cat(i,"\n")
stopifnot(i<5)
}
media <-function(x)
{
soma=sum(x)
nobs=length(x)
media=soma/nobs
return(media)
}
debug(media)
media(c(1,2,3))
soma
print(soma)
media(c(1,2,3))
nobs
media
debug(Ehprimo)
Ehprimo(4)
aux
aux
undebug(media)
media(c(3,4,4,))
media(c(3,4,4))
system.time(Ehprimo(400001))
undebug(Ehprimo)
system.time(Ehprimo(400001))
system.time(Ehprimo(4001))
media
system.time(mean(1:10000000))
system.time(media(1:10000000))
url<-"http://ecologia.ib.usp.br/bie5782/lib/exe/fetch.php?media=dados:esaligna.csv"
system.time(read.csv(url))
system.time(read.csv("esaligna.csv"))
a<-9
if(a%%2==0){
print("É par")
}else{
print("É impar")
}
numero<- c(0,1,2,3,4,5,6,7,8)
numero<- c(0,1,2,3,4,5,6,7,8)
ifelse(numero%%2==0,"par","impar")
alunos<-matrix(1:12,ncol=3)
numero.alunos<-dim(alunos)[1]
medias<-c()
for(i in 1:numero.alunos){
medias[i]<-mean(alunos[i,])
}
numero<-21
aux<-numero-1
primo<-TRUE
while(primo==TRUE &aux >1){
if(numero%%aux==0){
primo<-FALSE
}else{
aux=aux-1
print(aux)
}
}
print(primo)
for(i in 1:100){
print(i)
}
media <-function(x)
{
soma=sum(x)
nobs=length(x)
media=soma/nobs
return(media)
}
soma=sum(c(3,4,5))
media2 <-function(x)
{
nobs=length(x)
media=soma/nobs
return(media)
}
media2(c(3,4,5))
mediaEsoma <-function(x)
{
soma=sum(x)
nobs=length(x)
media=soma/nobs
return(c(media,soma))
}
for(i in 1:10){
cat(i,"\n")
stopifnot(i<5)
}
system.time(Ehprimo(400001))
system.time(Ehprimo(4001))
system.time(mean(1:10000000))
system.time(media(1:10000000))
url<-"http://ecologia.ib.usp.br/bie5782/lib/exe/fetch.php?media=dados:esaligna.csv"
system.time(read.csv(url))
system.time(read.csv("esaligna.csv"))
isPrime <- function(n) {
if (n == 2) return(TRUE)
if ( (n <= 1) || ( n %% 2 == 0 ) ) return(FALSE)
for( i in 3:sqrt(n) ) {
if ( n %% i == 0 ) return(FALSE)
}
TRUE
}
system.time(isPrime(400001))
system.time(Ehprimo(400001))
Ehprimo2<-function(numero){
aux<-sqrt(numero)
primo<-TRUE
while(primo==TRUE &aux>1){
if(numero%%aux==0){
primo<-FALSE}
aux=aux-1
}
return(primo)
}
system.time(Ehprimo2(400001))
system.time(Ehprimo(400001))
Programa
print("Balanço de despesas da Republica")
print("número de moradores")
moradores<-scan(n=1)
print("número de moradores")
moradores<-scan(n=1)
gastos<-data.frame()
for (i in 1:moradores){
print("Nome da pessoa")
gastos[i,1]<-scan(n=1,what="character")
print(paste("Gastos de",gastos[i,1]))
gastos[i,2]<-scan(n=1)
}
names(gastos)<-c("Nome","Gasto")
gastos$media<-mean(gastos[,2])
gastos$saldo<-gastos$Gasto-gastos$media
print(gastos)
install.packages("doParallel")
cl <- makeCluster(3)
library(doParallel)
cl <- makeCluster(3)
registerDoParallel(cl)
foreach(i=1:3) %dopar% sqrt(i)
system.time(sqrt(c(1:3)))
system.time(foreach(i=1:3) %dopar% sqrt(i))
for i in 1:3:
print(sqrt(i))
for i in 1:3
for i in 1:3 :
print(sqrt(i))
?for
m
?for
f
for(i in 1:3) :
print(sqrt(i))
for(i in 1:3)
print(sqrt(i))
system.time(
for(i in 1:3)
print(sqrt(i))
)
system.time(foreach(i=1:3000) %dopar% sqrt(i))
system.time(sqrt(c(1:3000)))
cl <- makeCluster(2)
registerDoParallel(cl)
foreach(i=1:3) %dopar% sqrt(i)
system.time(foreach(i=1:3) %dopar% sqrt(i))
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
foreach(i=1:3) %dopar% sqrt(i)
system.time(foreach(i=1:3) %dopar% sqrt(i))
system.time(sqrt(c(1:3)))
system.time(foreach(i=1:3) %do% sqrt(i))
> x <- iris[which(iris[,5] != "setosa"), c(1,5)]
> trials <- 10000
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
system.time({
+ r <- foreach(icount(trials), .combine=cbind) %dopar% {
+ ind <- sample(100, 100, replace=TRUE)
+ result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
+ coefficients(result1)
+ }
+ })
system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
stopCluster(cl)
cl <- makeCluster(2)
registerDoParallel(cl)
system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
stopCluster(cl)
cl <- makeCluster(4)
registerDoParallel(cl)
system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
a<-9
if(a%%2==0){
print("É par")
}else{
print("É impar")
}
a<-12
if(a%%2==0){
print("É par")
}else{
print("É impar")
}
numero<- c(0,1,2,3,4,5,6,7,8)
ifelse(numero%%2==0,"par","impar")
numero<- c(0,1,2,3,4,5,6,7,NA)
ifelse(numero%%2==0,"par","impar")
alunos<-matrix(1:12,ncol=3)
alunos
numero.alunos<-dim(alunos)[1]
medias<-c()
for(i in 1:numero.alunos){
medias[i]<-mean(alunos[i,])
}
medias
for(i in 1:20)
print(i)
for(banana in 1:20)
print(banana)
for(banana in 1:20)
print(banana*5)
for(banana in seq(1,20))
print(banana*5)
for(banana in seq(1,20,3))
print(banana*5)
for(banana in seq(1,20,3))
print(1*5)
numero<-15
aux<-numero-1
primo<-TRUE
while(primo==TRUE &aux >1){
if(numero%%aux==0){
primo<-FALSE
}else{
aux=aux-1
print(aux)
}
}
numero<-13
aux<-numero-1
primo<-TRUE
while(primo==TRUE &aux){
if(numero%%aux==0){
primo<-FALSE
}else{
aux=aux-1
print(aux)
}
}
numero<-13
aux<-numero-1
primo<-TRUE
while(primo==TRUE &aux>1){
if(numero%%aux==0){
primo<-FALSE
}else{
aux=aux-1
print(aux)
}
while(primo==TRUE &aux>1){
if(numero%%aux==0){
primo<-FALSE
}else{
aux=aux-1
print(aux)
}
}
}
numero<-13
aux<-numero-1
primo<-TRUE
while(primo==TRUE & aux>1){
if(numero%%aux==0){
primo<-FALSE
}else{
aux=aux-1
print(aux)
}
}
print(primo)
numero<-40013
aux<-numero-1
primo<-TRUE
while(primo==TRUE & aux>1){
if(numero%%aux==0){
primo<-FALSE
}else{
aux=aux-1
print(aux)
}
}
print(primo)
numero<-40013
aux<-numero-1
primo<-TRUE
while(primo==TRUE & aux>1){
if(numero%%aux==0){
primo<-FALSE
}else{
aux=aux-1
print(aux)
}
}
print(primo)
media <-function(x)
{
soma=sum(x)
nobs=length(x)
media=soma/nobs
return(media)
}
media(c(1:7))
ls()
media
soma=sum(c(3,4,5))
media2 <-function(x)
{
nobs=length(x)
media=soma/nobs
return(media)
}
media2(c(3,4,5))
rm(soma)
media2 <-function(x)
{
nobs=length(x)
media=soma/nobs
return(media)
}
media2(c(3,4,5))
soma=1
media2(c(3,4,5))
for(i in 1:10){
cat(i,"\n")
stopifnot(i<5)
}
media <-function(x)
{
soma=sum(x)
nobs=length(x)
media=soma/nobs
return(media)
}
debug(media)
media(c(1,2,3))
x
nobs
nobs
media(c(1,2,3))
undebug(media)
system.time(Ehprimo(400001))
system.time(Ehprimo(4001))
system.time(mean(1:10000000))
system.time(media(1:10000000))
url<-"http://ecologia.ib.usp.br/bie5782/lib/exe/fetch.php?media=dados:esaligna.csv"
system.time(read.csv(url))
system.time(read.csv("esaligna.csv"))
isPrime <- function(n) {
if (n == 2) return(TRUE)
if ( (n <= 1) || ( n %% 2 == 0 ) ) return(FALSE)
for( i in 3:sqrt(n) ) {
if ( n %% i == 0 ) return(FALSE)
}
TRUE
}
system.time(isPrime(400001))
system.time(Ehprimo(400001))
Ehprimo2<-function(numero){
aux<-sqrt(numero)
primo<-TRUE
while(primo==TRUE &aux>1){
if(numero%%aux==0){
primo<-FALSE}
aux=aux-1
}
return(primo)
}
system.time(Ehprimo2(400001))
system.time(Ehprimo(400001))
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=1:3) %dopar% sqrt(i)
system.time(foreach(i=1:3) %dopar% sqrt(i))
system.time(sqrt(c(1:3)))
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
r
system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
stopCluster(cl)
system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
cl <- makeCluster(4)
registerDoParallel(cl)
system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
FizzBuzz<-function(num){
x<-seq(1,num)
xx <- x
xx[x %% 3 == 0] <- "Fizz"
xx[x %% 5 == 0] <- "Buzz"
xx[x %% 15 == 0] <- "FizzBuzz"
return(xx)
}
FizzBuzz(30)
