layout(matrix(1:6, 3, 2))
layout.show(6)
plot(runif(1,1,1))
dev.list()
?par
dev.cur()
dev.off()
x11()
x11()
dev.cur()
?dev.cur()
?dev
dev.list()
dev.off()
dev.cur()
dev.off()
x<-c(1:6)
y<-c(5,6,7,8,9,10)
plot(x,y)
plot(y~x)
hist(x)
?plot
plot(x,y)
q()
y
?locator
locator(1)
indentify()
identify()
?identify
identify(2)
par(new=T)
plot(date,wind, data=airquality)
plot(date,Wind, data=airquality)
plot(airquality$date,airquality$Wind)
?axis
plot(1:4, rnorm(4), axes = FALSE)
example(axis)
?legend
h<-rnorm(30,1.75)
h
plot(airquality)
q()
y
coplot(Ozone~Solar.R)
coplot(Ozone~Solar.R,data=airquality)
?coplot
coplot(Ozone~Solar.R|Temp*Wind, number=c(4,4),data=airquality)
plot(airquality)
coplot(Ozone~Solar.R|Temp, number=c(2,2),data=airquality)
coplot(Ozone~Solar.R, number=c(2,2),data=airquality)
coplot(Ozone~Solar.R|Wind, number=c(2,2),data=airquality)
coplot(Ozone~Solar.R|Wind, number=c(1,1),data=airquality)
coplot(Ozone~Solar.R|Wind, number=c(4,4),data=airquality)
require(lattice)
demo(lattice)
pairs(airquality)
require(lattice)
densityplot(Ozone~date, data=airquality)
densityplot(~Ozone, data=airquality)
dotplot(~Ozone, data=airquality)
dotplot(Ozone~date, data=airquality)
dotplot(Ozone~date, data=airquality)
densityplot(~Ozone)
densityplot(~Ozone,data=airquality)
densityplot(~Ozone,data=airquality)
densityplot(Ozone~date,data=airquality)
densityplot(~Ozone|date,data=airquality)
densityplot(~date|Ozone,data=airquality)
airquality
densityplot(~Ozone|Month,data=airquality)
barchart(Ozone~date, data=airquality)
barchart(Ozone+Wind~date, data=airquality)
xyplot(~Ozone)
xyplot(~Ozone, data=airquality)
xyplot(~Ozone|date, data=airquality)
xyplot(~Ozone|Wind, data=airquality)
xyplot(Ozone~date, data=airquality)
xyplot(~date, data=airquality)
xyplot(~date|Ozone, data=airquality)
xyplot(~Wind|Ozone, data=airquality)
demo(grid)
require(grid)
demo(grid)
example(grid)
example(grid)
airquality
head(airquality)
example(lattice)
demo(lattice)
levels(states$state.region) <-
c("Northeast", "South", "North\n Central",  "West")
wireframe(volcano)
volcano
image(volcano)
example(volcano)
filled.contour(volcano, color.palette = terrain.colors, asp = 1)
levelplot(volcano)
wireframe(volcano)
image(volcano)
require(ggplot2)
example(ggplot2)
demo(ggplot2)
?maps
require(maps)
?maps
?map
map()
map(brazil)
?index
require(rMaps)
map()
data(world.cities)
world.cities
install.packages(ggmap)
install.packages("ggmap")
install.packages("png")
install.packages("R2G2")
require(R2G2)
example(R2G2)
help(R2G2)
example(PolyLines2GE)
example(PolyLines2GE)
demo(PolyLines2GE)
example(PolyLines2GE)
example(Hist2GE)
dev.off()
plot(x,x)
plot(x,x)
install.packages("picante")
geo
q()
y
require(RColorBrewer)
str(mapas)
str(mapa)
q()
y
rm(list=ls())
png("plot1.png", width=600,height=400)
x<-c(1:10)
y<-c(2:11)
plot(x,y)
dev.off()
x<-c(1:10)
y<-c(2:11)
plot(x,y)
data(airquality)
names(airquality)
airquality$date<-with(airquality,ISOdate(1973,Month,Day))
plot(Ozone~date, data=airquality)
plot(Ozone~date, data=airquality, type="l")
plot(Ozone~date, data=airquality, type="h")
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",xlab="data",ylab="Ozônio",col="red")
plot(x,y,type="n")
axis(4)
text(8,8,"Comentário")
mtext("texto lateral",side=4)
points(1:10,rep(4,10))
abline(h=7)
abline(v=3)
arrows(1:10,rep(4,10),1:10,rep(5,10), angle=45)
dev.off()
par(mfrow=c(2,2),new=FALSE,family="serif")
plot(1:4,1:4,pch=19,col="green")
plot(4:1,1:4,pch=22,col="red")
plot(1:5,2:6,pch=25)
plot(1:5,1:5,pch= "p")
plot(Ozone~date, data=airquality)
par(mfrow=c(1,1))
plot(Ozone~date, data=airquality)
locator(n=2)
x<-1:10
x2<-10:1
y<-1:10
plot(x,y,col="red",pch=16)
points(x2,y,col="blue", pch=16)
legend(5,10,legend=c("azul","vermelho"),pch=16,col=c("blue","red"))
par(mar=c(5,4,4,5))
plot(Ozone~date, data=airquality,type="h",col="blue",ylab="Ozonio",xlab="Data")
par(new=TRUE)
plot(airquality$date,airquality$Wind,type="l", col="red",xaxt="n",yaxt="n",xlab="",ylab="")
axis(4)
mtext("Vento",side=4,line=3)
bad<-ifelse(airquality$Ozone>=90,"orange","forestgreen")
plot(Ozone~date, data=airquality,type="h",col=bad)
require(RColorBrewer)
barplot(x,col=brewer.pal(8,"BrBG"))
dev.off()
plot(airquality)
pairs(airquality)
coplot(Ozone~Solar.R|Temp*Wind, number=c(4,4),data=airquality, pch=21)
image(volcano)
wireframe(volcano)
require(lattice)
wireframe(volcano)
install.packages("maps")
require(maps)
map('italy', fill = TRUE, col=brewer.pal(8,"BrBG"))
?map
map('brazil', fill = TRUE, col=brewer.pal(8,"BrBG"))
help(package='maps')
map('world', fill = TRUE, col=brewer.pal(8,"BrBG"))
map('world', col=brewer.pal(8,"BrBG"))
map('world', fill = TRUE, col=brewer.pal(8,"BrBG"))
require(maptools)
gpclibPermit()
gpclibPermit()<-T
require(sp)
mapa=readShapePoly("BRASIL")
hidro=readShapeLines("hidrografia")
summary(mapa)
summary(hidro)
plot(mapa)
par(new=T)
plot(hidro,col="blue")
library(R2G2)
install.packages("R2G2")
library(R2G2)
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",xlab="data",ylab="Ozônio",col="red")
abline(y=90)
abline(h=90)
abline(h=90, pch="--")
abline(h=90, lty=2)
abline(h=90)
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",xlab="data",ylab="Ozônio",col="red")
plot(Ozone~date, data=airquality)
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",
xlab="data",ylab="Ozônio",col="red")
abline(h=90)
abline(h=90, lty=2)
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",
xlab="data",ylab="Ozônio",col="red")
abline(h=90, lty=2)
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",
xlab="data",ylab="Ozônio",col="red")
abline(h=90, lty=2)
text(locator(1),"Muito ruim")
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",
xlab="data",ylab="Ozônio",col="red")
abline(h=90, lty=2)
text(locator(3),"Muito ruim")
?text
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",
xlab="data",ylab="Ozônio",col="red")
abline(h=90, lty=2)
text(locator(3),"Muito ruim", adj=0)
plot(Ozone~date, data=airquality, type="h", main="Qualidade do ar",
xlab="data",ylab="Ozônio",col="red")
abline(h=90, lty=2)
text(locator(3),"Muito ruim", adj=0)
demo(pch)
demo(plot)
demo(par)
demo()
demo(plotmath)
demo(image)
demo(sp)
demo(gallery)
plot(pch)
demo(plot())
?par
?pch
pchShow()
demo(points)
pchShow <-
function(extras = c("*",".", "o","O","0","+","-","|","%","#"),
cex = 3, ## good for both .Device=="postscript" and "x11"
col = "red3", bg = "gold", coltext = "brown", cextext = 1.2,
main = paste("plot symbols :  points (...  pch = *, cex =",
cex,")"))
{
nex <- length(extras)
np  <- 26 + nex
ipch <- 0:(np-1)
k <- floor(sqrt(np))
dd <- c(-1,1)/2
rx <- dd + range(ix <- ipch %/% k)
ry <- dd + range(iy <- 3 + (k-1)- ipch %% k)
pch <- as.list(ipch) # list with integers & strings
if(nex > 0) pch[26+ 1:nex] <- as.list(extras)
plot(rx, ry, type = "n", axes  =  FALSE, xlab = "", ylab = "", main = main)
abline(v = ix, h = iy, col = "lightgray", lty = "dotted")
for(i in 1:np) {
pc <- pch[[i]]
## 'col' symbols with a 'bg'-colored interior (where available) :
points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex)
if(cextext > 0)
text(ix[i] - 0.3, iy[i], pc, col = coltext, cex = cextext)
}
}
pchShow()
demo(graphics)
demo(colors)
demo(hclColors)
demo(Hershey)
demo(webmap)
install.packages("ggmap")
demo(webmap)
install.packages(rgdal)
install.packages("rgdal")
q()
q()
??manipulate
library(manipulate)
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
manipulate(
plot(cars, xlim = c(x.min, x.max), type = type,
axes = axes, ann = label),
x.min = slider(0,15),
x.max = slider(15,30, initial = 25),
type = picker("p", "l", "b", "c", "o", "h", "s", "S", "n"),
axes = checkbox(TRUE, "Draw Axes"),
label = checkbox(FALSE, "Draw Labels"))
install.packages("plotly")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
data("diamonds")
data(diamonds)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
d
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = d$carat, y = d$price, text = paste("Clarity: ", d$carat),
mode = "markers", color = d$carat, size = d$carat)
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
library(png)
library(plotly,suppressMessages(TRUE))
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = d$carat, y = d$price, text = paste("Clarity: ", d$carat),
mode = "markers", color = d$carat, size = d$carat)
library(ggplot2, suppressMessages(TRUE))
library(ggplot2, suppressMessages(TRUE))
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, type="scatter",x = d$carat,
y = d$price,text = paste("Clarity: ", d$carat),
mode = "markers", color = d$carat, size = d$carat)
library(RColorBrewer)
demo(RColorBrewer)
?RColorBrewer
display.brewer.all()
display.brewer.pal()
require(colorspace)
?colorspaces
barplot(c(10,20,20,10,5), col=c("ff9999ff", "ff1010ff", "10ffadff",
"fff410ff", "ff10ecff"))
barplot(c(10,20,20,10,5), col=c("#ff9999ff", "#ff1010ff", "#10ffadff",
"#fff410ff", "#ff10ecff"))
demo(image)
demo(colors)
?boxplot
data(InsectSprays)
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
data(InsectSprays)
boxplot(count ~ spray, data = InsectSprays, col = c("lightgray","orange"))
boxplot(len ~ dose:supp, data = ToothGrowth,
boxwex = 0.5, col = c("orange", "yellow"),
main = "Guinea Pigs' Tooth Growth",
xlab = "Vitamin C dose mg", ylab = "tooth length",
sep = ":", lex.order = TRUE, ylim = c(0, 35), yaxs = "i")
boxplot(len ~ dose:supp, data = ToothGrowth,
boxwex = 0.5, col = c("orange", "yellow"),
xlab = "Vitamin C dose mg", ylab = "tooth length")
x<-rep(5,times=100)
y<-rep(5,times=100)
plot(x,y)
?jitter
plot(jitter(x),jitter(y))
plot(x,y, xlim=c(0,10), ylim=c(0,10))
plot(jitter(x),jitter(y), xlim=c(0,10), ylim=c(0,10))
plot(x,y, xlim=c(4,6), ylim=c(4,6))
plot(jitter(x),jitter(y), xlim=c(4,6), ylim=c(4,6))
require(maptools)
require(sp)
mapa=readShapePoly("BRASIL")
hidro=readShapeLines("hidrografia")
summary(mapa)
summary(hidro)
#limites do mapa
plot(mapa)
par(new=T)
plot(hidro,col="blue")
require(maptools,  quietly = TRUE, warn.conflicts = FALSE)
require(sp,  quietly = TRUE, warn.conflicts = FALSE)
require(rg)
data(cars)
plot(dist~speed,data=cars)
with(cars, lines(lowess(speed, dist), col="tomato", lwd=2))
install.packages("survey")
library("survey")
data(api)
boxplot(api00~cut(api99,(3:10)*100), data=apipop)
par(las=1)
par(mar=c(5.1,10.1,2.1,2.1))
boxplot(api00~interaction(stype, cut(api99,(3:10)*100)),
data=apipop, horizontal=TRUE,col=1:3)
apipop$newstype <- factor( as.character(apipop$stype), levels=c("E","M","H") )
boxplot(api00~interaction(newstype, cut(api99,(3:10)*100)),
data=apipop, horizontal=TRUE,col=1:3, varwidth=TRUE)
par(mar=c(10.1,5.1,2.1,2.1))
par(las=3)
boxplot(api00~interaction(newstype, cut(api99,(3:10)*100)),
data=apipop,col=1:3, varwidth=TRUE)
setwd( "C:/Users/biostat/Desktop/sisg" )
plot(apipop$api00, apipop$api99)
install.packages(c("hexbin","survey"))
install.packages(c("hexbin", "survey"))
library("hexbin")
plot(hexbin(apipop$api99,apipop$api00), style="centroids")
plot(hexbin(apipop$api99,apipop$api00), style="centroids")
lm.e <- coef(lm(api00~api99, data=apipop, subset=stype=="E"))
lm.m <- coef(lm(api00~api99, data=apipop, subset=stype=="M"))
lm.h <- coef(lm(api00~api99, data=apipop, subset=stype=="H"))
hexVP.abline(vp1$plot.vp, lm.e[1], lm.e[2], col="coral")
?hexbin
set.seed(101)
x <- rnorm(10000)
y <- rnorm(10000)
(bin <- hexbin(x, y))
## or
plot(hexbin(x, y + x*(x+1)/4),
main = "(X, X(X+1)/4 + Y)  where X,Y ~ rnorm(10000)")
plot(bin, style = "nested.lattice")
x[runif(6, 0, length(x))] <- NA
y[runif(7, 0, length(y))] <- NA
hbN <- hexbin(x,y)
hbN
plot(hbN)
q()
library(manipulate)
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
x11()
png("plot1.png", width=600,height=400)
x<-c(1:10)
y<-c(2:11)
plot(x,y)
dev.off()
x<-c(1:10)
y<-c(2:11)
plot(x,y)
plot(rep(1,10))
data(airquality)
names(airquality)
airquality$date<-with(airquality,ISOdate(1973,Month,Day))
plot(x,y,type="n")
x11()
plot(x,y,type="n")
axis(4)
text(8,8,"Comentário")
mtext("texto lateral",side=4)
mtext("texto lateral",side=4)
points(1:10,rep(4,10))
abline(h=7)
abline(v=3)
arrows(1:10,rep(4,10),1:10,rep(5,10), angle=45)
par(mfrow=c(2,2),new=FALSE,family="serif")
plot(1:4,1:4,pch=19,col="green")
plot(4:1,1:4,pch=22,col="red")
plot(1:5,2:6,pch=25)
plot(1:5,1:5,pch= "p")
?par
?pch
plot(Ozone~date, data=airquality)
par(mfrow=c(2,2))
par(mfrow=c(1,1))
plot(Ozone~date, data=airquality)
locator(n=2)
demo(graphics)
demo(image)
demo(colors)
require(sp)
install.packages("sp")
require(sp)
demo(gallery)
demo(webmap)
install.packages("ggmap")
demo(webmap)
install.packages(rgdal)
install.packages("rgdal")
